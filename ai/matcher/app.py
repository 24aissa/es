from flask import Flask, request, jsonify\nimport math\n\napp = Flask(__name__)\n\n# Haversine formula to calculate distance between two points on the Earth\ndef haversine(lat1, lon1, lat2, lon2):\n    R = 6371  # Radius of the Earth in kilometers\n    dlat = math.radians(lat2 - lat1)\n    dlon = math.radians(lon2 - lon1)\n    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c\n\n# Validate detour based on route deviation\ndef validate_detour(original_route, detour_route, threshold):\n    original_distance = sum(haversine(original_route[i][0], original_route[i][1], original_route[i+1][0], original_route[i+1][1]) for i in range(len(original_route) - 1))\n    detour_distance = sum(haversine(detour_route[i][0], detour_route[i][1], detour_route[i+1][0], detour_route[i+1][1]) for i in range(len(detour_route) - 1))\n    return (detour_distance - original_distance) <= threshold\n\n@app.route('/match', methods=['POST'])\ndef match_route():\n    data = request.json\n    original_route = data.get('original_route')\n    detour_route = data.get('detour_route')\n    threshold = data.get('threshold', 0)\n\n    if not original_route or not detour_route:\n        return jsonify({'error': 'Both original_route and detour_route must be provided.'}), 400\n\n    detour_valid = validate_detour(original_route, detour_route, threshold)\n    return jsonify({'detour_valid': detour_valid})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n